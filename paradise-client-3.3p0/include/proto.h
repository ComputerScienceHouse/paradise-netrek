/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Thu Oct 12 16:29:25 1995
 */
#ifndef PROTO_H
#define PROTO_H

/* colors.c: colors.c
 *
 * Kevin P. Smith  6/11/89
 */

void getColorDefs P((void));

/* credits.c:
 * credits.c
 *
 * Bill Dyess
 *
 */

void showCredits P((W_Window win));

/* dashboard.c:
 * dashboard.c - graphic tstatw - 6/2/93
 *
 * copyright 1993 Lars Bernhardsson (lab@mtek.chalmers.se)
 * Free to use as long as this notice is left here.
 *
 * Color by Nick Trown.
 * Paradise shoehorning by Bill Dyess.
 * Rainbow dashboard by Bill Dyess
 */

void db_bar P((char *lab, int x, int y, int value, int tmpmax, int max, int digits, int color));
void db_box P((int x, int y, int width, int height, int f, int color));
void db_color_bar P((char *lab, int x, int y, int barvalue, int numvalue, int tmpmax, int max, int digits));
void db_flags P((int fr));
void db_redraw P((int fr));
void db_redraw_BRM P((int fr));
void db_redraw_krp P((int fr));
void db_timer P((int fr, int xloc, int yloc));
void light_erase P((void));
void light_receive P((void));
void light_send P((void));
void redrawTstats P((void));
void stline P((int flag));

/* death.c:
 * death.c
 */

void death P((void));
void redraw_death_messages P((void));

/* detonate.c:
 * detonate.c
 */

void detmine P((void));

/* defaults.c: defaults.c
 *
 * Kevin P. Smith  6/11/89
 * Bill Dyess      9/29/93  - moved all default settings to resetDefaults
 *                           from main
 * Bill Dyess	   11/8/93  - created expandFilename function
 * Bill Dyess      11/20/93 - added #include capability
 */

int booleanDefault P((char *def, int preferred));
int defaultShip P((int preferred));
char * expandFilename P((char *filename));
void freeDefaults P((void));
char * initDefaults P((char *deffile));
void initLogFile P((void));
int intDefault P((char *def, int preferred));
void resetDefaults P((void));
char * stringDefault P((char *def, char *preferred));

/* defwin.c: This file generated by configure. */

char * btoa P((int v));
void def_action P((W_Event *ev));
void def_write P((char *file));
char * itos P((int v));
void showdef P((void));

/* distress.c:
 * distress.c
 */

int condmacro P((char *bufa, char *bufb, int *inda, int *indb, int flag));
void Dist2Mesg P((struct distress *dist, char *buf));
void HandleGenDistr P((char *message, unsigned char from, unsigned char to, struct distress *dist));
int itoa2 P((int n, char s[]));
int makedistress P((struct distress *dist, char *cry, char *pm));
int skipmacro P((char buf[], int i));
int solvetest P((char *bufa, int *inda));
char * strcap P((char *s));
int testmacro P((char *bufa, char *bufb, int *inda, int *indb));

/* dmessage.c:
 * dmessage.c
 *
 * for the client of a socket based protocol.
 * code for message window scrollback added by Bill Dyess 12/7/93
 */

void CheckFeatures P((char *m));
void dmessage P((char *message, unsigned int flags, unsigned int from, unsigned int to));
void evalFlags P((int type, char *flagList));
void initMessageWindows P((void));
int instr P((char *string1, char *string2));
void logit P((char *message));
void messageWinEvent P((W_Event *evt));
void print_message P((char *message, unsigned int flags, unsigned int from, unsigned int to));
void rsvp_borg_call P((char *message, int from));
void sendVersion P((void));

/* enter.c:
 * enter.c
 *
 * This version modified to work as the client in a socket based protocol.
 */

void enter P((void));
void openmem P((void));

/* findslot.c:
 * findslot.c
 *
 * Kevin Smith 03/23/88
 *
 */

int findslot P((void));

/* gameconf.c: src/defines.h.  Generated automatically by configure.  */

void build_default_configuration P((void));
int compute_gameparam_size P((char *buf));
void free_phasers P((void));
void free_plasmas P((void));
void free_ranks P((void));
void free_royal P((void));
void free_teams P((void));
void free_thingies P((void));
void free_torps P((void));
void initialize_planets P((void));
void initialize_plasmas P((void));
void initialize_players P((void));
void initialize_thingies P((void));
void initialize_torps P((void));
void init_ranks P((void));
void init_royal P((void));
void load_default_teamlogos P((void));
void load_default_teams P((void));
void load_generic_teams P((void));
void reinit_ranks P((void));
void reinit_royal P((void));
void resize_players P((void));

/* getname.c:
 * getname.c
 *
 * Kevin P. Smith 09/28/88
 *
 */

void getname P((char *defname, char *def_passwd));
void noautologin P((void));

/* getship.c:
 * getship.c for client of socket protocol.
 *
 * This file has been mangled so it only sets the ship characteristics needed.
 */

struct ship * getship P((int s_type));
void init_galaxy_class P((void));
void init_shiptypes P((void));

/* helpwin.c:
 * helpwin.c
 * copyright 1991 ERic mehlhaff
 * Free to use, hack, etc. Just keep these credits here.
 * Use of this code may be dangerous to your health and/or system.
 * Its use is at your own risk.
 * I assume no responsibility for damages, real, potential, or imagined,
 * resulting  from the use of it.
 *
 * Hacked into paradise by Bill Dyess
 */

void fillhelp P((void));
void update_Help_to_Keymap P((char helpmessage[]));

/* inform.c:
 * inform.c
 */

void destroyInfo P((void));
void inform P((W_Window ww, int x, int y, char key));
void updateInform P((void));

/* interface.c:
 * interface.c
 *
 * This file will include all the interfaces between the input routines
 *  and the daemon.  They should be useful for writing robots and the
 *  like
 */

void beam_down P((void));
void beam_up P((void));
void bomb_planet P((void));
void cloak P((void));
int mtime P((void));
void set_course P((unsigned int dir));
void set_speed P((int speed));
void shield_down P((void));
void shield_tog P((void));
void shield_up P((void));

/* keymap.c:
 * keymap.c
 * Bill Dyess, 10/20/93
 */

void buildShipKeymap P((struct ship *shipp));
void buttonmapAdd P((char *str, char *kmap));
void cbuttonmapAdd P((char *cstr, char *kmap));
void ckeymapAdd P((char *cstr, char *kmap));
int doKeymap P((W_Event *data));
void initkeymap P((int type));
void keymapAdd P((char *str, char *kmap));

/* local.c: local.c, all code that writes to the local window (w) [BDyess] */

PlanetImageNode * createLocalImageNode P((struct planet *p, bitstruct bits));
void doShowMySpeed P((int dx, int dy, W_Image *ship_bits, struct player *j));
void local P((void));
void redraw_all_planets P((void));
void redraw_asteroids P((void));

/* macros.c: here's pretty much all the macro code.   */

void doMacro P((W_Event *data));
void doMacro2 P((struct macro *m, W_Event *data));
void getConditionalString P((char **locpntr, char **destpntr, W_Event *data));
void getTestString P((char *buf, char **locpntr, char **destpntr, W_Event *data));
void handle_conditional P((char **locpntr, char **destpntr, W_Event *data));
void handle_dollar P((char **locpntr, char **destpntr, W_Event *data));
void handle_special P((char **locpntr, char **destpntr, W_Event *data));
void handle_test P((char **locpntr, char **destpntr, W_Event *data));
void ignoreConditionalString P((char **locpntr));
void initMacros P((void));

/* macrowin.c:
 * macrowin.c from helpwin.c
 * copyright 1993 Nick Trown
 * copyright 1991 ERic mehlhaff
 * Free to use, hack, etc. Just keep these credits here.
 * Use of this code may be dangerous to your health and/or system.
 * Its use is at your own risk.
 * I assume no responsibility for damages, real, potential, or imagined,
 * resulting  from the use of it.
 * Yeah.....what Eric said...
 */

void filldist P((int fill));
void fillmacro P((void));
int formatline P((char *line));
void showMacroWin P((void));
void switchmacros P((void));

/* map.c: map.c, all the routines that use the map window [BDyess] */

PlanetImageNode * createMapImageNode P((struct planet *p, bitstruct bits));
bitstruct createPlanetBits P((struct planet *p, char *s, int l));
void drawMapPlanet P((struct planet *p, int x, int y));
W_Image * getPlanetImage P((PlanetImageNode *lhead, struct planet *p, bitstruct bits, PlanetImageNode * (*createNode) ()));
void map P((void));

/* motdwin.c:**  Pop-up motd window code.  [BDyess] 11/21/93  ***/

void motdWinEvent P((W_Event *evt));
void showMotdWin P((void));

/* newstats.c:
 * newstats.c
 *
 * As best I can tell, this was written by Tundra Dan.
 */

void calibrate_Newstats P((void));
void format_value P((int value, int start, int length));
void redrawNewStats P((void));
void stat_timer P((int fr, int xloc, int yloc));
void updateNewStats P((void));

/* newwin.c:
 * newwin.c
 */

void do_refit P((int type));
void drawIcon P((void));
void erase_motd P((void));
void get_N_dispatch_outfit_event P((int *team, int *s_type, int *lastplayercount));
void mapAll P((void));
void newMotdLine P((char *line));
void newMotdPic P((int x, int y, int width, int height, char *bits, int page));
void newwin P((char *hostmon, char *progname));
void new_entrywindow P((int *team, int *s_type));
void showMotd P((W_Window win));
void showValues P((W_Window win));

/* option.c:
 * option.c
 */

int optionaction P((W_Event *data));
void optiondone P((void));
void optionredrawoption P((int *ip));
void optionredrawtarget P((W_Window win));
void optionwindow P((void));

/* packets.c: src/defines.h.  Generated automatically by configure.  */

int size_of_cpacket P((void *pkt));
int size_of_spacket P((unsigned char *pkt));

/* parsemeta.c:
 * meta.c     - Nick Trown    May 1993
 */

void metainput P((void));
void metawindow P((void));
void openmeta P((void));

/* planetlist.c:
 * planetlist.c
 */

void planetlist P((void));

/* planets.c:
 * planets.c
 *
 * Kevin P. Smith  2/21/89
 *
 * This file contains the galaxy definition as well as some support for
 *  determining when parts of the galactic map need to be redrawn.
 */

void checkRedraw P((int x, int y));
void drawStars P((void));
void initOnePlanet P((struct planet *pl));
void initPlanets P((void));
void initStars P((void));
int randcolor P((void));
void _drawStars P((void));
void _initStars P((void));

/* playerlist.c:
 * playerlist.c
 * modified to sort by teams by Bill Dyess on 9/23/93
 */

void getdesig P((struct player *j, char *desig));
char * get_players_rank_name P((struct player *j));
void playerlist P((void));
void playerlist2 P((void));
void playerwEvent P((W_Event *data));
void selectblkbozo P((W_Event *data));

/* ranklist.c:
 * ranklist.c
 *
 * Kevin P. Smith 12/5/88
 *
 */

void ranklist P((void));

/* ratings.c:
 * ratings.c,  2/13/94 Bill Dyess
 */

struct ratings * get_ratings P((struct player *j, struct ratings *r));

/* rotate.c:
 * rotate.c
 *
 */

void rotate_all P((void));
void rotate_coord P((int *x, int *y, int d, int cx, int cy));
void rotate_dir P((unsigned char *d, int r));
void rotate_gcenter P((int *x, int *y));

/* sintab.c:
 * sintab.c
 *
 * Also initialize blk_giwdth to 100000 and blk_windgwidth
 * to WINSIDE/blk_gwidth
 */

void inittrigtables P((void));

/* smessage.c:
 * smessage.c
 */

void carry_report P((void));
void emergency P((void));
char * getaddr P((int who));
char * getaddr2 P((int flags, int recip));
int getgroup P((int address, int *recip));
void message_expose P((void));
void message_off P((void));
void message_on P((void));
void pmessage P((char *str, int recip, int group));
void sendCharMessage P((char *buffer, int ch));
void smessage P((int ichar));
void smessage_ahead P((char head, char ichar));

/* socket.c:
 * Socket.c
 *
 * Kevin P. Smith 1/29/89
 * UDP stuff v1.0 by Andy McFadden  Feb-Apr 1992
 *
 * UDP protocol v1.0
 *
 * Routines to allow connection to the xtrek server.
 */

char * callServer P((int port, char *server));
int closeUdpConn P((void));
int compute_extension1_size P((char *pkt));
void connectToServer P((int port));
int gwrite P((int fd, char *buffer, int bytes));
int idx_to_mask P((int i));
int isServerDead P((void));
int mask_to_idx P((int m));
void print_totals P((void));
int readFromServer P((void));
void sendDetMineReq P((int torp));
void sendLoginReq P((char *name, char *pass, char *loginname, int query));
void sendMessage P((char *mes, int group, int indiv));
void sendOptionsPacket P((void));
void sendRepressReq P((int state, int pnum));
void sendShortPacket P((int type, int state));
void sendTeamReq P((int team, int ship));
void sendTractorReq P((int state, int pnum));
void sendUdpReq P((int req));
void sendUpdatePacket P((long speed));
void socketPause P((int sec, int usec));
int sock_read P((int s, char *data, int size));

/* stats.c:
 * stats.c
 */

void calibrate_stats P((void));
void redrawStats P((void));
void updateStats P((void));

/* util.c:
 * util.c
 * added functionality to gettarget() - Bill Dyess 10/6/93
 */

struct obtype * gettarget P((W_Window ww, int x, int y, int targtype));
struct id * getTargetID P((W_Window ww, int x, int y, int targtype));
double hypot2 P((double x, double y));
char * team_bit_string P((int mask));

/* varydamage.c:
 * varydamage.c
 */

void doHull P((int dx, int dy, W_Image *ship_bits, struct player *j));
void doShields P((int dx, int dy, W_Image *ship_bits, struct player *j));

/* war.c:
 * war.c
 */

void waraction P((W_Event *data));
void warwindow P((void));

/* warning.c:
 * warning.c
 */

void hwarning P((char *text));
char * timeString P((time_t t));
void warning P((char *text));

/* udpopt.c:
 * udpopt.c - present UDP control window
 */

void udpaction P((W_Event *data));
void udpdone P((void));
void udprefresh P((int i));
void udpwindow P((void));

/* blk_parsemotd.c:
 *
 */

void blk_parsemotd P((char *line));

/* shortcomm.c: This file implements all SHORT_PACKETS functions */

void add_whydead P((char *s, int m));
void handleVPlanet P((unsigned char *sbuf));
void handleVPlayer P((unsigned char *sbuf));
void handleVTorp P((unsigned char *sbuf));
void handleVTorpInfo P((unsigned char *sbuf));
void sendShortReq P((int state));
void sendThreshold P((int v));
char * ship_type P((struct ship *shp));

/* spopt.c: This file generated by configure. */

void spaction P((W_Event *data));
void spdone P((void));
void sprefresh P((int i));
void spwindow P((void));

/* ping.c:
 * ping.c
 *
 */

void calc_lag P((void));
void sendServerPingResponse P((int number));
void startPing P((void));
void stopPing P((void));

/* pingstats.c:
 * pingstats.c	(mostly taken from stats.c)
 */

void initPStats P((void));
int pStatsHeight P((void));
int pStatsWidth P((void));
void redrawPStats P((void));
void updatePStats P((void));

/* wide_plist.c: This file generated by configure. */

int playerlistnum P((void));
void plist_line P((struct player *j, int pos));
void Sorted_playerlist2 P((void));
void wideplayerlist P((void));
void wideplayerlist2 P((void));
void writeDiffText P((W_Window window, int x, int y, W_Color color, char *orig, char *new, W_Font font));

/* feature.c:
 * Feature.c
 *
 * March, 1994.    Joe Rumsey, Tedd Hadley
 *
 * most of the functions needed to handle SP_FEATURE/CP_FEATURE
 * packets.  fill in the features list below for your client, and
 * add a call to reportFeatures just before the RSA response is sent.
 * handleFeature should just call checkFeature, which will search the
 * list and set the appropriate variable.  features unknown to the
 * server are set to the desired value for client features, and off
 * for server/client features.
 *
 * feature packets look like:
struct feature_cpacket {
   char                 type;
   char                 feature_type;
   char                 arg1,
                        arg2;
   int                  value;
   char                 name[80];
};

 *  type is CP_FEATURE, which is 60.  feature_spacket is identical.
 */

void reportFeatures P((void));
void sendFeature P((char *name, int feature_type, int value, int arg1, int arg2));

/* beeplite.c: This file generated by configure. */

void litedefaults P((void));
void liteplanet P((struct planet *l, W_Color col));
void liteplayer P((struct player *j, W_Color col));
void rcdlite P((struct distress *dist));

/* recorder.c: This file generated by configure. */

void pb_dokey P((W_Event *event));
void pb_framectr P((int xloc, int yloc));
void pb_input P((void));
void pb_skip P((int frames));
int readRecorded P((int fp, char *data, int len));
void recordPacket P((char *data, int len));
int startPlayback P((void));
void startRecorder P((void));
void stopRecorder P((void));
void writeUpdateMarker P((void));

/* senddist.c:
 * distress.c
 */

struct distress * loaddistress P((enum dist_type i, W_Event *data));
int pmacro P((int mnum, char who, W_Event *data));
void rcd P((enum dist_type i, W_Event *data));

/* tools.c: tools.c - shell escape, graphic toolsw - 10/10/93
 * 
 * copyright 1993 Kurt Siegl <siegl@risc.uni-linz.ac.at> Free to use, hack, etc.
 * Just keep these credits here. Use of this code may be dangerous to your
 * health and/or system. Its use is at your own risk. I assume no
 * responsibility for damages, real, potential, or imagined, resulting  from
 * the use of it.
 * 
 */

void sendTools P((char *str));
void showToolsWin P((void));

/* hockey.c: This file generated by configure. */

void drawPuckArrow P((void));
void galactic_hockey P((void));
void hockeyInit P((void));
void tactical_hockey P((void));

/* images.c: images.c.  Contains the image control data. [BDyess] */

int cmpfilenames P((const void *left, const void *right));
W_Image * getImage P((int offset));
int getImageNum P((W_Image *image));
/*W_Image * getShipImage P((int team, int ship));*/
W_Image *getShipImage P((struct player *));
void loadAllImages P((void));
void loadImageByFilename P((char *filename));

/* sound.c:
 * sound.c - Platform Independant Sound Support - Dec. 1994
 *
 * Copyright 1994 Sujal M. Patel (smpatel@wam.umd.edu)
 * Conditions in "copyright.h"          
 */

void init_sound P((void));
void kill_sound P((void));
void maybe_play_sound P((int k));
void play_sound P((int k));
void sound_completed P((int k));

/* main.c:
 * main.c
 */

int main P((int argc, char **argv));
void reaper P((void));

/* input.c:
 * input.c
 *
 * Modified to work as client in socket based protocol
 */

void dispatch_W_button_event P((W_Event *evt));
void dispatch_W_event P((W_Event *evt));
void dispatch_W_expose_event P((W_Event *evt));
void dispatch_W_key_event P((W_Event *evt));
int getcourse P((W_Window ww, int x, int y));
void initinput P((void));
void input P((void));

/* redraw.c:
 * redraw.c
 */

void intrupt P((void));
struct _clearzone * new_czone P((void));
void recalcWindowConstants P((void));
void redraw P((void));
int zoom_offset P((int v));

/* x11window.c: x11window.c
 *
 * Kevin P. Smith  6/11/89
 * Much modified by Jerry Frain and Joe Young
 * Many many modifications by Bill Dyess
 * Full-color rewriting done by Bill Dyess
 */

int checkBuffered P((char *name));
int checkloaded P((W_Image *image));
int checkMapped P((char *name));
int checkScrollSaveLines P((char *name));
int findMouseInWin P((int *x, int *y, W_Window window));
struct window * newWindow P((Window window, int type));
void W_Beep P((void));
W_Image * W_BitmapToImage P((unsigned int width, unsigned int height, char *bits));
void W_Buffer P((W_Window window, int on));
void W_CacheClearArea P((W_Window window, int x, int y, int width, int height));
void W_CacheLine P((W_Window window, int X0, int Y0, int X1, int Y1, int color));
void W_CachePoint P((W_Window window, int x, int y, int color));
void W_ChangeBorder P((W_Window window, int color));
void W_ClearArea P((W_Window window, int x, int y, unsigned int width, unsigned int height));
void W_ClearBuffer P((W_Window window));
void W_ClearWindow P((W_Window window));
W_Image * W_CreateCombinedImage P((W_Image **imagelist, W_Color color));
void W_DefineCursor P((W_Window window, int width, int height, char *bits, char *mask, int xhot, int yhot));
void W_DefineTCrossCursor P((W_Window window));
void W_DefineTextCursor P((W_Window window));
void W_Deiconify P((W_Window window));
void W_DestroyWindow P((W_Window window));
void W_DirectMaskText P((W_Window window, int x, int y, W_Color color, char *str, int len, W_Font font));
void W_DisplayBuffer P((W_Window window));
void W_DrawImage P((W_Window window, int x, int y, int frame, W_Image *image, W_Color color));
void W_DrawImageBar P((W_Window win, int x, int y, int len, W_Image *image));
void W_DrawImageNoClip P((W_Window window, int x, int y, int frame, W_Image *image, W_Color color));
void W_DrawImageOr P((W_Window window, int x, int y, int frame, W_Image *image, W_Color color));
void W_DrawPoint P((W_Window window, int x, int y, W_Color color));
void W_DrawSectorHighlight P((W_Window window, int x, int y, int width, int h, W_Color color));
void W_DrawShield P((W_Window window, int centerx, int centery, unsigned int diameter, W_Color color));
int W_EventsPending P((void));
void W_FillArea P((W_Window window, int x, int y, unsigned int width, unsigned int height, W_Color color));
void W_Flush P((void));
void W_FlushClearAreaCache P((W_Window window));
void W_FlushLineCaches P((W_Window window));
void W_FlushPointCaches P((W_Window window));
void W_FreeImage P((W_Image *image));
void W_GetEvent P((W_Event *wevent));
void W_Initialize P((char *str));
int W_IsBuffered P((W_Window window));
int W_IsMapped P((W_Window window));
int W_LoadExternalImage P((W_Image *image));
int W_LoadImage P((W_Image *image));
int W_LoadInternalImage P((W_Image *image));
void W_MakeLine P((W_Window window, int X0, int Y0, int X1, int Y1, W_Color color));
W_Window W_MakeMenu P((char *name, int x, int y, int width, int height, W_Window parent, int border));
W_Window W_MakeScrollingWindow P((char *name, int x, int y, int width, int height, W_Window parent, char *cursname, int border));
W_Window W_MakeTextWindow P((char *name, int x, int y, int width, int height, W_Window parent, char *cursname, int border));
void W_MakeTractLine P((W_Window window, int X0, int Y0, int X1, int Y1, W_Color color));
W_Window W_MakeWindow P((char *name, int x, int y, int width, int height, W_Window parent, char *cursname, int border, W_Color color));
void W_MapWindow P((W_Window window));
void W_MaskText P((W_Window window, int x, int y, W_Color color, char *str, int len, W_Font font));
int W_Mono P((void));
void W_NextEvent P((W_Event *wevent));
void W_OverlayImage P((W_Window window, int x, int y, int frame, W_Image *image, int overframe, W_Image *overimage, W_Color color));
void W_RenameWindow P((W_Window window, char *str));
void W_ResizeMenu P((W_Window window, int neww, int newh));
void W_ResizeText P((W_Window window, int neww, int newh));
void W_ResizeWindow P((W_Window window, int neww, int newh));
void W_RevertCursor P((W_Window window));
void W_SetIconWindow P((W_Window win, W_Window icon));
void W_SetSensitive P((W_Window window, int v));
int W_Socket P((void));
void W_Sync P((void));
void W_TileWindow P((W_Window window, W_Image *image));
void W_TranslatePoints P((W_Window window, int *x, int *y));
void W_UnmapWindow P((W_Window window));
void W_UnTileWindow P((W_Window window));
void W_UpdateScrollBar P((W_Window window));
void W_WarpPointer P((W_Window window, int x, int y));
int W_WindowHeight P((W_Window window));
int W_WindowWidth P((W_Window window));
void W_WriteAnyTriangle P((W_Window window, int X1, int Y1, int X2, int Y2, int X3, int Y3, W_Color color));
void W_WriteArc P((int filled, W_Window window, int x, int y, int width, int height, int angle1, int angle2, W_Color color));
void W_WriteText P((W_Window window, int x, int y, W_Color color, char *str, int len, W_Font font));
void W_WriteTriangle P((W_Window window, int x, int y, int s, int t, W_Color color));

char *strlower P((char *s));
char *strupper P((char *s));

#endif /* PROTO_H */
